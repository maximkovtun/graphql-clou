// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tools should generate DAO class to be match to snapshot 1`] = `
"
  import { createEntityDAO } from '@venncity/base-dao';
  import * as graphqlTypes from './types';
  
  export default class SurveyDAO {
    private readonly baseDAO: any;
  
    constructor({ hooks, daoAuth, publishCrudEvent }: { hooks: any; daoAuth: any; publishCrudEvent: any }) {
      const baseDAO = createEntityDAO({
        entityName: 'survey',
        hooks,
        daoAuth,
        publishCrudEvent
      });
      this.baseDAO = baseDAO;
    }
  
    survey(context: any, where: graphqlTypes.QuerySurveyArgs['where']): Promise<null | graphqlTypes.Query['survey']> {
      return this.baseDAO.entitiy(context, where);
    }
  
    surveyById(context: any, id: graphqlTypes.Scalars['ID']): Promise<null | graphqlTypes.Query['survey']> {
      return this.baseDAO.entitiyById(context, id);
    }
  
    surveys(context: any, args: graphqlTypes.QuerySurveysArgs): Promise<graphqlTypes.Query['surveys']> {
      return this.baseDAO.entities(context, args);
    }
  
    surveysByIds(context: any, ids: graphqlTypes.Scalars['ID'][]): Promise<graphqlTypes.Query['surveys']> {
      return this.baseDAO.entitiesByIds(context, ids);
    }
  
    createSurvey(context: any, data: graphqlTypes.MutationCreateSurveyArgs['data']): Promise<graphqlTypes.Mutation['createSurvey']> {
      return this.baseDAO.createEntity(context, data);
    }
  
    updateSurvey(context: any, args: graphqlTypes.MutationUpdateSurveyArgs): Promise<null | graphqlTypes.Mutation['updateSurvey']> {
      return this.baseDAO.updateEntity(context, args);
    }
  
    updateManySurveys(context: any, args: graphqlTypes.MutationUpdateManySurveysArgs): Promise<graphqlTypes.Mutation['updateManySurveys']> {
      return this.baseDAO.updateManyEntities(context, args);
    }
  
    deleteSurvey(context: any, where: graphqlTypes.MutationDeleteSurveyArgs['where']): Promise<null | graphqlTypes.Mutation['deleteSurvey']> {
      return this.baseDAO.deleteEntity(context, where);
    }
  
    deleteManySurveys(context: any, where: graphqlTypes.MutationDeleteManySurveysArgs['where']): Promise<graphqlTypes.Mutation['deleteManySurveys']> {
      return this.baseDAO.deleteManyEntities(context, where);
    }
  
    surveyConnection(parent: any, args: graphqlTypes.QuerySurveysConnectionArgs, context: any): Promise<graphqlTypes.Query['surveysConnection']> {
      return this.baseDAO.entitiesConnection(parent, args, context);
    }
  }"
`;
